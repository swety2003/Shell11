// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using GlazeWm.Messages;
//
//    var topLevel = TopLevel.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace GlazeWm.Messages
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class TopLevel
    {
        [JsonPropertyName("messageType")]
        public string MessageType { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("clientMessage")]
        public string ClientMessage { get; set; }

        [JsonPropertyName("data")]
        public Data Data { get; set; }

        [JsonPropertyName("error")]
        public dynamic Error { get; set; }

        [JsonPropertyName("success")]
        public bool Success { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("subscriptionId")]
        public Guid? SubscriptionId { get; set; }
    }

    public partial class Data
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("bindingModes")]
        public List<dynamic> BindingModes { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("focused")]
        public Focused Focused { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("tilingDirection")]
        public string TilingDirection { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("directionContainer")]
        public ActivatedWorkspace DirectionContainer { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("monitors")]
        public List<Monitor> Monitors { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("subscriptionId")]
        public Guid? SubscriptionId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("eventType")]
        public string EventType { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("focusedContainer")]
        public Focused FocusedContainer { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("activatedWorkspace")]
        public ActivatedWorkspace ActivatedWorkspace { get; set; }
    }

    public partial class ActivatedWorkspace
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Name { get; set; }

        [JsonPropertyName("displayName")]
        public dynamic DisplayName { get; set; }

        [JsonPropertyName("parentId")]
        public Guid ParentId { get; set; }

        [JsonPropertyName("children")]
        public List<Focused> Children { get; set; }

        [JsonPropertyName("childFocusOrder")]
        public List<Guid> ChildFocusOrder { get; set; }

        [JsonPropertyName("hasFocus")]
        public bool HasFocus { get; set; }

        [JsonPropertyName("isDisplayed")]
        public bool IsDisplayed { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("x")]
        public long X { get; set; }

        [JsonPropertyName("y")]
        public long Y { get; set; }

        [JsonPropertyName("tilingDirection")]
        public string TilingDirection { get; set; }
    }

    public partial class Focused
    {
        [JsonPropertyName("type")]
        public FocusedType Type { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("parentId")]
        public Guid ParentId { get; set; }

        [JsonPropertyName("hasFocus")]
        public bool HasFocus { get; set; }

        //[JsonPropertyName("tilingSize")]
        //public long? TilingSize { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("x")]
        public long X { get; set; }

        [JsonPropertyName("y")]
        public long Y { get; set; }

        [JsonPropertyName("state")]
        public State State { get; set; }

        [JsonPropertyName("prevState")]
        public dynamic PrevState { get; set; }

        [JsonPropertyName("displayState")]
        public DisplayState DisplayState { get; set; }

        [JsonPropertyName("borderDelta")]
        public BorderDelta BorderDelta { get; set; }

        [JsonPropertyName("floatingPlacement")]
        public FloatingPlacement FloatingPlacement { get; set; }

        [JsonPropertyName("handle")]
        public long Handle { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("className")]
        public string ClassName { get; set; }

        [JsonPropertyName("processName")]
        public string ProcessName { get; set; }

        [JsonPropertyName("activeDrag")]
        public dynamic ActiveDrag { get; set; }
    }

    public partial class BorderDelta
    {
        [JsonPropertyName("left")]
        public Bottom Left { get; set; }

        [JsonPropertyName("top")]
        public Bottom Top { get; set; }

        [JsonPropertyName("right")]
        public Bottom Right { get; set; }

        [JsonPropertyName("bottom")]
        public Bottom Bottom { get; set; }
    }

    public partial class Bottom
    {
        //[JsonPropertyName("amount")]
        //public long Amount { get; set; }

        [JsonPropertyName("unit")]
        public Unit Unit { get; set; }
    }

    public partial class FloatingPlacement
    {
        [JsonPropertyName("left")]
        public long Left { get; set; }

        [JsonPropertyName("top")]
        public long Top { get; set; }

        [JsonPropertyName("right")]
        public long Right { get; set; }

        [JsonPropertyName("bottom")]
        public long Bottom { get; set; }
    }

    public partial class State
    {
        [JsonPropertyName("type")]
        public StateType Type { get; set; }
    }

    public partial class Monitor
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("parentId")]
        public Guid ParentId { get; set; }

        [JsonPropertyName("children")]
        public List<ActivatedWorkspace> Children { get; set; }

        [JsonPropertyName("childFocusOrder")]
        public List<Guid> ChildFocusOrder { get; set; }

        [JsonPropertyName("hasFocus")]
        public bool HasFocus { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("height")]
        public long Height { get; set; }

        [JsonPropertyName("x")]
        public long X { get; set; }

        [JsonPropertyName("y")]
        public long Y { get; set; }

        [JsonPropertyName("dpi")]
        public float Dpi { get; set; }

        [JsonPropertyName("handle")]
        public long Handle { get; set; }

        [JsonPropertyName("deviceName")]
        public string DeviceName { get; set; }

        [JsonPropertyName("devicePath")]
        public string DevicePath { get; set; }

        [JsonPropertyName("hardwareId")]
        public string HardwareId { get; set; }

        [JsonPropertyName("workingRect")]
        public FloatingPlacement WorkingRect { get; set; }
    }

    public enum Unit { Pixel };

    //public enum ClassName { ChromeWidgetWin1, WindowsForms10Window8App013965FaR7Ad1 };

    public enum DisplayState { Showing, Shown, Hidden, Hiding };

    //public enum ProcessName { Code, Fiddler, Msedge };

    public enum StateType { Minimized, Tiling , FullScreen, Floating };

    public enum FocusedType { Window, Workspace };

    public partial class TopLevel
    {
        public static TopLevel FromJson(string json) => JsonSerializer.Deserialize<TopLevel>(json, GlazeWm.Messages.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TopLevel self) => JsonSerializer.Serialize(self, GlazeWm.Messages.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                UnitConverter.Singleton,
                DisplayStateConverter.Singleton,
                StateTypeConverter.Singleton,
                FocusedTypeConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class UnitConverter : JsonConverter<Unit>
    {
        public override bool CanConvert(Type t) => t == typeof(Unit);

        public override Unit Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "pixel")
            {
                return Unit.Pixel;
            }
            throw new Exception("Cannot unmarshal type Unit");
        }

        public override void Write(Utf8JsonWriter writer, Unit value, JsonSerializerOptions options)
        {
            if (value == Unit.Pixel)
            {
                JsonSerializer.Serialize(writer, "pixel", options);
                return;
            }
            throw new Exception("Cannot marshal type Unit");
        }

        public static readonly UnitConverter Singleton = new UnitConverter();
    }


    internal class DisplayStateConverter : JsonConverter<DisplayState>
    {
        public override bool CanConvert(Type t) => t == typeof(DisplayState);

        public override DisplayState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "showing":
                    return DisplayState.Showing;
                case "shown":
                    return DisplayState.Shown;
                case "hidden":
                        return DisplayState.Hidden;
                case "hiding": return DisplayState.Hiding;
            }
            throw new Exception($"Cannot unmarshal type DisplayState :{value}");
        }

        public override void Write(Utf8JsonWriter writer, DisplayState value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case DisplayState.Showing:
                    JsonSerializer.Serialize(writer, "showing", options);
                    return;
                case DisplayState.Shown:
                    JsonSerializer.Serialize(writer, "shown", options);
                    return;
            }
            throw new Exception("Cannot marshal type DisplayState");
        }

        public static readonly DisplayStateConverter Singleton = new DisplayStateConverter();
    }


    internal class StateTypeConverter : JsonConverter<StateType>
    {
        public override bool CanConvert(Type t) => t == typeof(StateType);

        public override StateType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "minimized":
                    return StateType.Minimized;
                case "tiling":
                    return StateType.Tiling;
                case "fullscreen":
                    return StateType.FullScreen;
                case "floating": return StateType.Floating;
            }
            throw new Exception($"Cannot unmarshal type StateType: {value}");
        }

        public override void Write(Utf8JsonWriter writer, StateType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case StateType.Minimized:
                    JsonSerializer.Serialize(writer, "minimized", options);
                    return;
                case StateType.Tiling:
                    JsonSerializer.Serialize(writer, "tiling", options);
                    return;
            }
            throw new Exception("Cannot marshal type StateType");
        }

        public static readonly StateTypeConverter Singleton = new StateTypeConverter();
    }

    internal class FocusedTypeConverter : JsonConverter<FocusedType>
    {
        public override bool CanConvert(Type t) => t == typeof(FocusedType);

        public override FocusedType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "window")
            {
                return FocusedType.Window;
            }
            if (value == "workspace")
            {
                return FocusedType.Workspace;
            }
            throw new Exception($"Cannot unmarshal type FocusedType: {value}");
        }

        public override void Write(Utf8JsonWriter writer, FocusedType value, JsonSerializerOptions options)
        {
            if (value == FocusedType.Window)
            {
                JsonSerializer.Serialize(writer, "window", options);
                return;
            }
            throw new Exception("Cannot marshal type FocusedType");
        }

        public static readonly FocusedTypeConverter Singleton = new FocusedTypeConverter();
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                    || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
