<UserControl x:Class="Shell11.MenuBarExtensions.Controls.SystemTrayIcon"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Shell11.MenuBarExtensions.Controls" xmlns:convertors="clr-namespace:Shell11.MenuBarExtensions.Convertors"
             mc:Ignorable="d"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             Margin="1 0"
             Loaded="UserControl_Loaded"
             Unloaded="UserControl_Unloaded"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <ResourceDictionary>
            <convertors:NotificationBalloonTitleConverter x:Key="balloonTitleConverter" />
            <convertors:NotificationBalloonWidthConverter x:Key="balloonWidthConverter" />
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Border Height="auto" Margin="0" 
                BorderBrush="Transparent" Background="Transparent" Padding="3" Cursor="Hand" VerticalAlignment="Center" MouseUp="Image_MouseUp" 
                MouseDown="Image_MouseDown" 
                MouseEnter="Image_MouseEnter" 
                MouseLeave="Image_MouseLeave" 
                MouseMove="Image_MouseMove"
                BorderThickness="1"
                CornerRadius="4"
                ToolTip="{Binding Path=Title}" 
                ToolTipService.VerticalOffset="8"
                ToolTipService.Placement="Bottom">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseEnter">
                    <i:ChangePropertyAction PropertyName="Background" Value="{DynamicResource SolidBackgroundFillColorQuarternaryBrush}"/>
                    <i:ChangePropertyAction PropertyName="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}"/>
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeave">
                    <i:ChangePropertyAction PropertyName="Background" Value="transparent"/>
                    <i:ChangePropertyAction PropertyName="BorderBrush" Value="transparent"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Image Height="16" Source="{Binding Path=Icon, Mode=OneWay}"
                   Name="NotifyIconImage" />
        </Border>
        <!-- The width of this border animates to a constant value 0..1 via its style -->
        <Border Width="0"
                x:Name="AnimatingBorder" />
        <!-- This border contains the actual notification, its width is calculated by
             multiplying the width of the child StackPanel by the width of the above border -->
        <Border>
            <!-- The second border here shows/hides based on the balloon's existence.
                 We also use this element's hover state to determine if the popup should
                 show, as it will hide during the dismiss animation. This prevents showing
                 an empty popup. -->
            <Border
                    x:Name="BalloonInlineBorder">
                <StackPanel
                             x:Name="BalloonInlinePanel">
                    <TextBlock Text="{Binding Path=Balloon, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource balloonTitleConverter}}"
                                MouseLeftButtonUp="TextBlock_MouseLeftButtonUp" />
                    <Button
                            ToolTip="_Dismiss"
                            Click="Button_Click">r</Button>
                </StackPanel>
            </Border>
            <Border.Width>
                <MultiBinding Converter="{StaticResource balloonWidthConverter}">
                    <Binding Path="ActualWidth" ElementName="BalloonInlinePanel" />
                    <Binding Path="Width" ElementName="AnimatingBorder" />
                </MultiBinding>
            </Border.Width>
        </Border>
        <Popup AllowsTransparency="True"
                PopupAnimation="Slide"
                Name="BalloonPopup"
                IsOpen="{Binding ElementName=BalloonInlineBorder, Path=IsMouseOver, Mode=OneWay}">
            <Border>
                <Border>
                    <StackPanel Orientation="Vertical">
                        <DockPanel>
                            <Image Source="{Binding Path=Balloon.Icon, RelativeSource={RelativeSource AncestorType=UserControl}, Mode=OneWay}"
                                    DockPanel.Dock="Left" />
                            <TextBlock Text="{Binding Path=Balloon.Title, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
                        </DockPanel>
                        <TextBlock Text="{Binding Path=Balloon.Info, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
                    </StackPanel>
                </Border>
            </Border>
        </Popup>
    </Grid>
</UserControl>
