<UserControl
    x:Class="Shell11.MenuBarExtensions.Controls.SystemTrayIcon"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:convertors="clr-namespace:Shell11.MenuBarExtensions.Convertors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:Shell11.MenuBarExtensions.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:shaders="clr-namespace:Shell11.MenuBarExtensions.Shaders"
    Margin="1,0"
    d:DesignHeight="450"
    d:DesignWidth="800"
    Loaded="UserControl_Loaded"
    Unloaded="UserControl_Unloaded"
    mc:Ignorable="d">

    <UserControl.Resources>
        <ResourceDictionary>
            <shaders:InvertEffect x:Key="ColorKeyReplaceEffect" />

            <convertors:NotificationBalloonTitleConverter x:Key="balloonTitleConverter" />
            <convertors:NotificationBalloonWidthConverter x:Key="balloonWidthConverter" />
            <convertors:NotificationIconColorConvertor x:Key="NotificationIconColorConvertor" />
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Border
            Height="auto"
            Margin="0"
            Padding="3"
            VerticalAlignment="Center"
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="1"
            CornerRadius="4"
            Cursor="Hand"
            MouseDown="Image_MouseDown"
            MouseEnter="Image_MouseEnter"
            MouseLeave="Image_MouseLeave"
            MouseMove="Image_MouseMove"
            MouseUp="Image_MouseUp"
            ToolTip="{Binding Path=Title}"
            ToolTipService.Placement="Bottom"
            ToolTipService.VerticalOffset="8">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseEnter">
                    <i:ChangePropertyAction PropertyName="Background" Value="{DynamicResource SolidBackgroundFillColorQuarternaryBrush}" />
                    <i:ChangePropertyAction PropertyName="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="MouseLeave">
                    <i:ChangePropertyAction PropertyName="Background" Value="transparent" />
                    <i:ChangePropertyAction PropertyName="BorderBrush" Value="transparent" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Image
                Name="NotifyIconImage"
                Height="16"
                Effect="{Binding Converter={StaticResource NotificationIconColorConvertor}, ConverterParameter={StaticResource ColorKeyReplaceEffect}}"
                Source="{Binding Path=Icon, Mode=OneWay}" />
        </Border>
        <!--  The width of this border animates to a constant value 0..1 via its style  -->
        <Border x:Name="AnimatingBorder" Width="0" />
        <!--
            This border contains the actual notification, its width is calculated by
            multiplying the width of the child StackPanel by the width of the above border
        -->
        <Border>
            <!--
                The second border here shows/hides based on the balloon's existence.
                We also use this element's hover state to determine if the popup should
                show, as it will hide during the dismiss animation. This prevents showing
                an empty popup.
            -->
            <Border x:Name="BalloonInlineBorder">
                <StackPanel x:Name="BalloonInlinePanel">
                    <TextBlock MouseLeftButtonUp="TextBlock_MouseLeftButtonUp" Text="{Binding Path=Balloon, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource balloonTitleConverter}}" />
                    <Button Click="Button_Click" ToolTip="_Dismiss">r</Button>
                </StackPanel>
            </Border>
            <Border.Width>
                <MultiBinding Converter="{StaticResource balloonWidthConverter}">
                    <Binding ElementName="BalloonInlinePanel" Path="ActualWidth" />
                    <Binding ElementName="AnimatingBorder" Path="Width" />
                </MultiBinding>
            </Border.Width>
        </Border>
        <Popup
            Name="BalloonPopup"
            AllowsTransparency="True"
            IsOpen="{Binding ElementName=BalloonInlineBorder, Path=IsMouseOver, Mode=OneWay}"
            PopupAnimation="Slide">
            <Border>
                <Border>
                    <StackPanel Orientation="Vertical">
                        <DockPanel>
                            <Image DockPanel.Dock="Left" Source="{Binding Path=Balloon.Icon, RelativeSource={RelativeSource AncestorType=UserControl}, Mode=OneWay}" />
                            <TextBlock Text="{Binding Path=Balloon.Title, RelativeSource={RelativeSource AncestorType=UserControl}}" />
                        </DockPanel>
                        <TextBlock Text="{Binding Path=Balloon.Info, RelativeSource={RelativeSource AncestorType=UserControl}}" />
                    </StackPanel>
                </Border>
            </Border>
        </Popup>
    </Grid>
</UserControl>
