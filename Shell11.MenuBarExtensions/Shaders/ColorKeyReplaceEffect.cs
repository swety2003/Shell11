//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;


namespace Shell11.MenuBarExtensions.Shaders;


/// <summary>An effect that makes pixels of a particular color transparent.</summary>
public class ColorKeyReplaceEffect : ShaderEffect {
    public static readonly DependencyProperty InputProperty = ShaderEffect.RegisterPixelShaderSamplerProperty("Input", typeof(ColorKeyReplaceEffect), 0);
    public static readonly DependencyProperty ColorSourceProperty = DependencyProperty.Register("ColorSource", typeof(Color), typeof(ColorKeyReplaceEffect), new UIPropertyMetadata(Color.FromArgb(255, 255, 255, 255), PixelShaderConstantCallback(0)));
    public static readonly DependencyProperty ToleranceProperty = DependencyProperty.Register("Tolerance", typeof(double), typeof(ColorKeyReplaceEffect), new UIPropertyMetadata(((double)(0.3D)), PixelShaderConstantCallback(1)));
    public static readonly DependencyProperty ColorTargetProperty = DependencyProperty.Register("ColorTarget", typeof(Color), typeof(ColorKeyReplaceEffect), new UIPropertyMetadata(Color.FromArgb(255, 0, 128, 0), PixelShaderConstantCallback(2)));
    public ColorKeyReplaceEffect() {
        PixelShader pixelShader = new PixelShader();
        pixelShader.UriSource = new Uri("pack://application:,,,/Shell11.MenuBarExtensions;component/Shaders/ColorKeyReplaceEffect.ps", UriKind.RelativeOrAbsolute);
        this.PixelShader = pixelShader;

        this.UpdateShaderValue(InputProperty);
        this.UpdateShaderValue(ColorSourceProperty);
        this.UpdateShaderValue(ToleranceProperty);
        this.UpdateShaderValue(ColorTargetProperty);
    }
    public Brush Input {
        get {
            return ((Brush)(this.GetValue(InputProperty)));
        }
        set {
            this.SetValue(InputProperty, value);
        }
    }
    /// <summary>The color that to be replaced.</summary>
    public Color ColorSource {
        get {
            return ((Color)(this.GetValue(ColorSourceProperty)));
        }
        set {
            this.SetValue(ColorSourceProperty, value);
        }
    }
    /// <summary>The tolerance in color differences.</summary>
    public double Tolerance {
        get {
            return ((double)(this.GetValue(ToleranceProperty)));
        }
        set {
            this.SetValue(ToleranceProperty, value);
        }
    }
    /// <summary>The color that replace.</summary>
    public Color ColorTarget {
        get {
            return ((Color)(this.GetValue(ColorTargetProperty)));
        }
        set {
            this.SetValue(ColorTargetProperty, value);
        }
    }
}
